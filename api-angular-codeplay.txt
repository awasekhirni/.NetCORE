webpack => amdl 
asynchronous module definition and loader. 
msbuild (c#)
=> webpack 
=>systemjs 
=> grunt task runnner 
=> gulp task runner 
=> requirejs 

1.scaffold your applicationusing asp.net core angular 
   dotnet new angular 
2. cd applicationfolder
3. npm install --save //=> node_modules folder  this will read package.json 
and install all the angular dependencies in the node-modules 
4.dotnet build 
5. dotnet run http://localhost:5000
5b. dotnet add package Microsoft.EntityFrameworkCore.Design
6. add DotNetCliReference to Project.csproj 
 <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.2" />
    <DotNetCliToolReference Include="Microsoft.EntityFrameCore.Tools.DotNet" Version="2.0.1" />
  </ItemGroup>
  7. dotnet new sln 
  8. open it in visual studio and add project 
  9. create models for the database 
  10. Add Context folder and Add DbSets 
  11. Startup.cs 
      => add Swashbuckle.swagger.aspnetcore reference 
      => add 
      //  ConfigureServices

         services.AddDbContext<CallCenterContext>(options =>
            {
                options.UseSqlServer(Configuration.GetConnectionString("CallCenterConnect"));
            });


    services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Swashbuckle.AspNetCore.Swagger.Info {
                    Title = "GeoTrackerAPI", Version = "V1"
                });
            });
            
          //  Configure

          app.UseStatusCodePages();
            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "GeoTrackerAPI V1");
            });


=> add services (if required)

12. build your application 
dotnet ef dbcontext info 
13. dotnet ef migrations add cr_initialcreate 
14. dotnet ef database update 
15. add controllers with ef crud for all the models 
16. build your application and test in swagger 
17. start writing angular application. 

18.create folder for angular application 
19.create services inside angular application => commonservice 
inject http, httpModule, JsonpModule and RequestOptions. 
 => register all the api calls to a UrlArray 
 => call the methods to fetch the data 
    
     return this.http
      .get(this.url + this.apiUrl[1])
      .map((response: Response) => response.json()).catch(this.handleError);

20. create component => inject lifecycle hooks (ngOnInit, onDestroy, onChanges, AfterViewInit, AfterViewChecked, DoCheck, AfterContentInit, AfterContentChecked)
=> subscribe to this method , localstorage (sectors)
 return this._cs.getBusinessSectorsData().subscribe(results=>{
            this.sectors = results;
            console.log(results);
        });

21. Bind sectors to the view using *ngFor to iterate through a collection of objects => componentview.html 
22.App.shared.module.ts => register the components, and then register the providers , finally, we bind the component path in the router
23. register the navigation view component => to render the path => routeLink 
24. build your application and run it . http://localhost:port/business
