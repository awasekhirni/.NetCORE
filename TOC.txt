Table of Contents => .NET Core 2.0
1. Scenario1=> consoleappone => console application with .Net core 
2. Scenario2=> classlibrary => class library applciation with .Net core 2.0
3. Scneario3=> solution => create a solution and add both consoleappone and classlibrary to the solution.
4. scenario 4=> visual studio 2017 => create a console application 
5. scenario 5=> ASP.NET Core Empty Web Application using CLI  
6. Scenario 6=> ASP.NET Core MVC 2.0 Application 
7. Scenario 7=> ASP.NET Core 2.0 MVC with Razor Application 
8. Scenario 8=> ASP.NET Core 2.0 with Angular 
9. Scenario 9=> ASP.NET Core 2.0 with ReactJS 
10. Scenario 10=> ASP.NET Core 2.0 with ReactJS +Redux 
11. Scenario 11=> ASP.NET Core 2.0 with MVC + Individual Authentication 
12. Scenario 12 => ASP.NET Core 2.0 with Razor + Individual Authentication 
13. Scenario 13=>ASP.NET Core 2.0 with Razor +Individual Authentication 
14. Scenario 14=> Kestrel => Writing a basic http server to render http web server
15. Scenario 15 => ASP.NET Core 2.0 Application Development with Visual Studio 2017. 
     Empty Web Application 
     ASP.NET Core 2.0 MVC 
     ASP.NET Core 2.0 MVC with razor views 
     ASP.NET Core 2.0 Web API 
     ASP.NET Core 2.0 MVC using Angular 
     ASP.NET Core 2.0 MVC using ReactJS 
     ASP.NET Core 2.0 MVC using ReactJS + Redux 

16. Scenario 16 => ZOMATO CORE (Configuration/Service Demo)=>ASP.NET CORE 2.0 Empty Application Demo 
      a. defining appsettings.json to define application settings at runtime.
      b. configuration builder 
      c. binding the configuration builder properties to render it to the view. 
      d. Writing a Service and configuring the service in startup.cs 

17. Scenario 17=> MiddleWare Functions Demo 
    a. list of middle ware functions in ASP.NET Core 2.0 
    b.Writing your custom middle ware function => http request pipelines
    c. middleware functions 
18. Scenario18=>  conventional routing example with mvc middleware 
    a. conventional routing using IRouteBuilder 
    b. app.Usemvc();
    c.controllers 
    d.models
    e. action results => objectresult
19.Scenario19=> ActionResult/IActionResult demo with asp.net core 2 mvc application  
    a. type of actionresults
    b. uses of action results 
    c. demo using various action results. 
20.Scenario20=> Asp.NetCore 2.0 MVC Application with inmemorydata service. 
    a. creating an mvc application with model,controller and view. 
    b. create a service and register the service with startup.cs (configureservices)
    c. bind the service with the controller 
    d. create a view to bind it to the controller. 
21. Scenario21=> ASP.NETCore2.0 MVC Application with Models and ViewModels + Inmemorydata service. 
    a.DTO/ViewModel which does not persist to the database. 
    b. Viewmodel, service and wrting a custom view. 
22. Scenario 22=> ASP.NET Core 2.0 MVC Application with EntityFramework Core 2.0 + SQLServer 
    a.installing EntityFramework Core 2.0 
    b. registring DotnetCLITool into project.csproj 
    c. dotnet ef CLI demos 
    d. creating a model => binding it to dbcontext => Microsoft.EntityFrameworkCore 
    e. creating an interface for service and its implementation. reading appsettings.json into startup.cs
    f. executing migrations using dotnet ef database update -verbose 
    g. creating a controller with entityframework 
    h. inserting some records to the database 
    i. running your application. 
